#!/usr/bin/env python3
"""
Teste do Sistema de Sincroniza√ß√£o Incremental
Verifica se todas as funcionalidades est√£o funcionando corretamente
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import DatabaseManager
from sync_manager import SyncManager
import time

def test_sync_system():
    """Testa o sistema completo de sincroniza√ß√£o incremental"""
    print("üîÑ TESTE DO SISTEMA DE SINCRONIZA√á√ÉO INCREMENTAL")
    print("=" * 60)
    
    # Inicializar componentes
    print("\n1Ô∏è‚É£ Inicializando componentes...")
    db = DatabaseManager()
    sync_manager = SyncManager(db)
    
    # Testar cria√ß√£o de tabelas
    print("\n2Ô∏è‚É£ Testando cria√ß√£o de tabelas...")
    if sync_manager.criar_tabelas_sync():
        print("‚úÖ Tabelas de sincroniza√ß√£o criadas com sucesso")
    else:
        print("‚ùå Erro ao criar tabelas de sincroniza√ß√£o")
        return False
    
    # Testar inicializa√ß√£o de usu√°rio
    print("\n3Ô∏è‚É£ Testando inicializa√ß√£o de usu√°rio...")
    test_user_id = 1  # Usar um ID de teste
    
    if sync_manager.inicializar_sync_usuario(test_user_id):
        print("‚úÖ Usu√°rio inicializado com sucesso")
    else:
        print("‚ùå Erro ao inicializar usu√°rio")
        return False
    
    # Testar obten√ß√£o de status
    print("\n4Ô∏è‚É£ Testando obten√ß√£o de status...")
    status = sync_manager.obter_status_sincronizacao(test_user_id)
    if status:
        print("‚úÖ Status obtido com sucesso:")
        for tipo, info in status.items():
            print(f"   ‚Ä¢ {tipo}: {info['status']} (√∫ltima: {info['last_successful']})")
    else:
        print("‚ùå Erro ao obter status")
        return False
    
    # Testar atualiza√ß√£o de status
    print("\n5Ô∏è‚É£ Testando atualiza√ß√£o de status...")
    if sync_manager.atualizar_ultima_sincronizacao(test_user_id, 'vendas', 'success'):
        print("‚úÖ Status atualizado com sucesso")
    else:
        print("‚ùå Erro ao atualizar status")
        return False
    
    # Testar verifica√ß√£o de necessidade de sincroniza√ß√£o
    print("\n6Ô∏è‚É£ Testando verifica√ß√£o de necessidade de sincroniza√ß√£o...")
    precisa_sync = sync_manager._precisa_sincronizar(test_user_id, 'vendas')
    print(f"   Precisa sincronizar vendas: {precisa_sync}")
    
    # Testar obten√ß√£o de usu√°rios ativos
    print("\n7Ô∏è‚É£ Testando obten√ß√£o de usu√°rios ativos...")
    usuarios_ativos = sync_manager._obter_usuarios_ativos()
    print(f"   Usu√°rios ativos: {usuarios_ativos}")
    
    # Testar fun√ß√µes do database
    print("\n8Ô∏è‚É£ Testando fun√ß√µes do database...")
    
    # Verificar se venda existe
    venda_existe = db.verificar_venda_existe(test_user_id, "TEST123")
    print(f"   Venda TEST123 existe: {venda_existe}")
    
    # Verificar se produto existe
    produto_existe = db.verificar_produto_existe(test_user_id, "TEST456")
    print(f"   Produto TEST456 existe: {produto_existe}")
    
    # Obter usu√°rios com tokens
    usuarios_com_tokens = db.obter_usuarios_com_tokens()
    print(f"   Usu√°rios com tokens: {usuarios_com_tokens}")
    
    print("\n9Ô∏è‚É£ Testando APIs de sincroniza√ß√£o...")
    
    # Simular dados de teste
    dados_venda_teste = {
        'id': 'TEST123',
        'status': 'paid',
        'date_created': '2024-01-01T00:00:00.000Z',
        'date_closed': '2024-01-01T00:00:00.000Z',
        'order_items': [
            {
                'item': {
                    'id': 'MLB123456789',
                    'title': 'Produto Teste',
                    'category_id': 'MLB1234'
                },
                'quantity': 1,
                'unit_price': 100.0
            }
        ],
        'payments': [
            {
                'id': 123456,
                'status': 'approved',
                'marketplace_fee': 5.0
            }
        ],
        'shipping': {
            'id': 789012,
            'status': 'shipped'
        },
        'buyer': {
            'id': 987654,
            'nickname': 'testuser'
        }
    }
    
    # Testar salvamento de venda
    if db.salvar_venda_completa(dados_venda_teste, test_user_id):
        print("‚úÖ Venda de teste salva com sucesso")
    else:
        print("‚ùå Erro ao salvar venda de teste")
    
    # Verificar se venda foi salva
    venda_existe_agora = db.verificar_venda_existe(test_user_id, "TEST123")
    print(f"   Venda TEST123 existe agora: {venda_existe_agora}")
    
    # Testar dados de produto
    dados_produto_teste = {
        'id': 'TEST456',
        'title': 'Produto Teste Sync',
        'category_id': 'MLB1234',
        'price': 150.0,
        'currency_id': 'BRL',
        'available_quantity': 10,
        'sold_quantity': 5,
        'condition': 'new',
        'status': 'active',
        'permalink': 'https://produto.mercadolivre.com.br/test456',
        'thumbnail': 'https://http2.mlstatic.com/test456.jpg',
        'date_created': '2024-01-01T00:00:00.000Z',
        'last_updated': '2024-01-01T00:00:00.000Z'
    }
    
    # Testar salvamento de produto
    if db.salvar_produto_completo(dados_produto_teste, test_user_id):
        print("‚úÖ Produto de teste salvo com sucesso")
    else:
        print("‚ùå Erro ao salvar produto de teste")
    
    # Verificar se produto foi salvo
    produto_existe_agora = db.verificar_produto_existe(test_user_id, "TEST456")
    print(f"   Produto TEST456 existe agora: {produto_existe_agora}")
    
    print("\nüîü Testando funcionalidades avan√ßadas...")
    
    # Testar registro de in√≠cio de sync
    sync_id = sync_manager._registrar_inicio_sync(test_user_id, 'vendas')
    print(f"   Sync ID registrado: {sync_id}")
    
    # Testar registro de fim de sync
    sync_manager._registrar_fim_sync(sync_id, 'success', 10, 5, 3, 2)
    print("‚úÖ Fim de sync registrado com sucesso")
    
    print("\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
    print("=" * 60)
    print("\nüìã RESUMO DOS TESTES:")
    print("   ‚úÖ Cria√ß√£o de tabelas de sincroniza√ß√£o")
    print("   ‚úÖ Inicializa√ß√£o de usu√°rio")
    print("   ‚úÖ Obten√ß√£o e atualiza√ß√£o de status")
    print("   ‚úÖ Verifica√ß√£o de necessidade de sincroniza√ß√£o")
    print("   ‚úÖ Obten√ß√£o de usu√°rios ativos")
    print("   ‚úÖ Verifica√ß√£o de exist√™ncia de vendas/produtos")
    print("   ‚úÖ Salvamento de vendas e produtos")
    print("   ‚úÖ Registro de hist√≥rico de sincroniza√ß√£o")
    
    print("\nüöÄ SISTEMA DE SINCRONIZA√á√ÉO INCREMENTAL PRONTO!")
    print("   ‚Ä¢ Detecta apenas mudan√ßas desde √∫ltima sincroniza√ß√£o")
    print("   ‚Ä¢ Evita reimportar dados desnecess√°rios")
    print("   ‚Ä¢ Mant√©m hist√≥rico completo de sincroniza√ß√µes")
    print("   ‚Ä¢ Funciona automaticamente em background")
    print("   ‚Ä¢ Interface web para monitoramento")
    
    return True

def test_sync_apis():
    """Testa as APIs de sincroniza√ß√£o"""
    print("\nüåê TESTE DAS APIs DE SINCRONIZA√á√ÉO")
    print("=" * 50)
    
    try:
        import requests
        
        base_url = "http://localhost:3001"
        
        # Testar status de sincroniza√ß√£o
        print("\n1Ô∏è‚É£ Testando API de status...")
        try:
            response = requests.get(f"{base_url}/api/sync/status", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print("‚úÖ API de status funcionando")
                    print(f"   Status: {data.get('sync_status', {})}")
                else:
                    print(f"‚ùå API de status retornou erro: {data.get('message')}")
            else:
                print(f"‚ùå API de status retornou status {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è Servidor n√£o est√° rodando - teste de API pulado")
        except Exception as e:
            print(f"‚ùå Erro ao testar API de status: {e}")
        
        # Testar hist√≥rico de sincroniza√ß√£o
        print("\n2Ô∏è‚É£ Testando API de hist√≥rico...")
        try:
            response = requests.get(f"{base_url}/api/sync/history", timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get('success'):
                    print("‚úÖ API de hist√≥rico funcionando")
                    print(f"   Hist√≥rico: {len(data.get('history', []))} registros")
                else:
                    print(f"‚ùå API de hist√≥rico retornou erro: {data.get('message')}")
            else:
                print(f"‚ùå API de hist√≥rico retornou status {response.status_code}")
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è Servidor n√£o est√° rodando - teste de API pulado")
        except Exception as e:
            print(f"‚ùå Erro ao testar API de hist√≥rico: {e}")
        
    except ImportError:
        print("‚ö†Ô∏è Biblioteca 'requests' n√£o instalada - teste de API pulado")

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTES DO SISTEMA DE SINCRONIZA√á√ÉO")
    print("=" * 60)
    
    # Executar testes principais
    success = test_sync_system()
    
    if success:
        # Executar testes de API
        test_sync_apis()
        
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
        print("=" * 60)
        print("\nüìù PR√ìXIMOS PASSOS:")
        print("   1. Inicie o servidor Flask")
        print("   2. Acesse /sync para usar a interface")
        print("   3. Configure frequ√™ncia de sincroniza√ß√£o")
        print("   4. Monitore o hist√≥rico de sincroniza√ß√µes")
        print("   5. Sistema funcionar√° automaticamente em background")
        
    else:
        print("\n‚ùå ALGUNS TESTES FALHARAM!")
        print("   Verifique os logs acima para identificar problemas")
        sys.exit(1)

#!/usr/bin/env python3
"""
Script para resolver problema de banco de dados no Amazon Linux 2023
"""

print('🗄️ RESOLVENDO PROBLEMA DE BANCO NO AMAZON LINUX 2023')
print('=' * 60)

print('❌ PROBLEMA IDENTIFICADO:')
print('   No match for argument: mariadb-server')
print()
print('💡 EXPLICAÇÃO:')
print('   No Amazon Linux 2023, nem MySQL nem MariaDB estão nos repositórios padrão')
print('   Precisa habilitar repositórios extras ou usar SQLite')
print()

print('✅ SOLUÇÃO 1: HABILITAR REPOSITÓRIOS EXTRAS')
print('=' * 50)
print('🔧 COMANDOS PARA HABILITAR REPOSITÓRIOS:')
print()
print('1. 📦 Habilitar repositório EPEL:')
print('   sudo yum install epel-release -y')
print()
print('2. 📦 Habilitar repositório Amazon Linux Extras:')
print('   sudo amazon-linux-extras install mariadb10.5 -y')
print()
print('3. 🚀 Iniciar MariaDB:')
print('   sudo systemctl start mariadb')
print('   sudo systemctl enable mariadb')
print()
print('4. 🔧 Configurar MariaDB:')
print('   sudo mysql_secure_installation')
print()
print('5. 🗄️ Criar banco de dados:')
print('   sudo mysql -u root -p')
print('   # Comandos SQL normais')
print()

print('✅ SOLUÇÃO 2: USAR SQLITE (MAIS SIMPLES)')
print('=' * 50)
print('🔧 VANTAGENS DO SQLITE:')
print('   - ✅ Já vem instalado')
print('   - ✅ Não precisa configuração')
print('   - ✅ Funciona imediatamente')
print('   - ✅ Arquivo único de banco')
print('   - ✅ Perfeito para desenvolvimento')
print()
print('🔧 MODIFICAR DATABASE.PY:')
print('   1. 📝 Editar database.py')
print('   2. 🔄 Trocar MySQL por SQLite')
print('   3. ✅ Funciona sem configuração')
print()

print('🎯 COMANDOS PARA SQLITE:')
print('=' * 40)
print('# 1. Verificar se SQLite está instalado')
print('sqlite3 --version')
print()
print('# 2. Criar banco de dados')
print('sqlite3 sistema_ml.db')
print()
print('# 3. Testar SQLite')
print('sqlite3 sistema_ml.db "SELECT 1;"')
print()

print('🚨 SOLUÇÃO 3: USAR DOCKER')
print('=' * 50)
print('💡 DICA: Se nada funcionar, use Docker:')
print()
print('1. 📦 Instalar Docker:')
print('   sudo yum install docker -y')
print('   sudo systemctl start docker')
print('   sudo systemctl enable docker')
print()
print('2. 🐳 Executar MySQL no Docker:')
print('   sudo docker run -d --name mysql-db \\')
print('     -e MYSQL_ROOT_PASSWORD=2154 \\')
print('     -e MYSQL_DATABASE=sistema_ml \\')
print('     -e MYSQL_USER=admin \\')
print('     -e MYSQL_PASSWORD=2154 \\')
print('     -p 3306:3306 mysql:8.0')
print()
print('3. ✅ MySQL funcionando no Docker')
print()

print('🎯 RECOMENDAÇÃO: USAR SQLITE')
print('=' * 50)
print('💡 POR QUE SQLITE É MELHOR:')
print('   - ✅ Zero configuração')
print('   - ✅ Funciona imediatamente')
print('   - ✅ Não precisa de serviços')
print('   - ✅ Arquivo único')
print('   - ✅ Perfeito para AWS')
print('   - ✅ Backup automático')
print()

print('🔧 MODIFICAR DATABASE.PY PARA SQLITE:')
print('=' * 50)
print('1. 📝 Editar database.py')
print('2. 🔄 Trocar mysql.connector por sqlite3')
print('3. 🔄 Modificar string de conexão')
print('4. ✅ Funciona sem configuração')
print()

print('🎯 RESUMO:')
print('=' * 30)
print('✅ Problema: Nem MySQL nem MariaDB disponíveis')
print('✅ Solução 1: Habilitar repositórios extras')
print('✅ Solução 2: Usar SQLite (recomendado)')
print('✅ Solução 3: Usar Docker')
print('✅ Recomendação: SQLite é mais simples')
print()

print('🚀 PRÓXIMOS PASSOS:')
print('=' * 30)
print('1. 🔧 Tentar habilitar repositórios extras')
print('2. 🗄️ Se não funcionar, usar SQLite')
print('3. 🚀 Reiniciar aplicação')
print('4. ✅ Verificar status')
print('5. 🌐 Testar aplicação')
print()

print('🎉 APÓS CORRIGIR:')
print('=' * 30)
print('✅ Banco de dados: funcionando')
print('✅ Flask-app: active (running)')
print('✅ Nginx: active (running)')
print('✅ Aplicação: http://SEU_IP_PUBLICO')
print()

print('🚀 SUA APLICAÇÃO ESTARÁ FUNCIONANDO!')
print('SQLite é uma excelente escolha para AWS!')

#!/usr/bin/env python3
"""
Script para testar a corre√ß√£o do frete com uma venda existente
"""

import os
from dotenv import load_dotenv
from meli_api import MercadoLivreAPI
from database import DatabaseManager

load_dotenv()

try:
    print('üß™ TESTANDO CORRE√á√ÉO DO FRETE')
    print('=' * 50)
    
    # Inicializar API e Database
    api = MercadoLivreAPI()
    db = DatabaseManager()
    
    user_id = 1305538297
    
    # Obter access token
    access_token = db.obter_access_token(user_id)
    if not access_token:
        print('‚ùå Erro: N√£o foi poss√≠vel obter access token')
        exit()
    
    # Buscar uma venda existente para testar
    order_ids = api.obter_todos_ids_vendas(user_id)
    
    if order_ids:
        # Pegar uma venda recente
        venda_id = order_ids[0]
        print(f'üì¶ Testando com venda: {venda_id}')
        
        # Buscar dados da venda
        venda_data = api.obter_venda_por_id(venda_id, access_token)
        
        if venda_data:
            print('‚úÖ Dados da venda obtidos!')
            
            # Simular a l√≥gica corrigida de extra√ß√£o de frete
            shipping = venda_data.get('shipping', {})
            frete_total = float(shipping.get('cost', 0))
            
            print(f'üöö Frete do shipping: R$ {frete_total:.2f}')
            
            # Se n√£o encontrar no shipping, busca nos pagamentos
            if frete_total == 0:
                payments = venda_data.get('payments', [])
                print(f'üí≥ Total de pagamentos: {len(payments)}')
                
                for i, payment in enumerate(payments):
                    shipping_cost = payment.get('shipping_cost', 0)
                    print(f'   Pagamento {i+1}: shipping_cost = R$ {shipping_cost}')
                    
                    if shipping_cost and shipping_cost > 0:
                        frete_total = float(shipping_cost)
                        print(f'‚úÖ Frete encontrado no pagamento: R$ {frete_total:.2f}')
                        break
            
            # Se ainda n√£o encontrar, busca em billing_info
            if frete_total == 0:
                billing = venda_data.get('billing_info', {})
                print(f'üí∞ Billing info: {billing}')
                
                if billing:
                    shipping_cost = billing.get('shipping_cost', 0)
                    print(f'   Shipping cost no billing: R$ {shipping_cost}')
                    
                    if shipping_cost and shipping_cost > 0:
                        frete_total = float(shipping_cost)
                        print(f'‚úÖ Frete encontrado no billing: R$ {frete_total:.2f}')
            
            print(f'üéØ FRETE FINAL CALCULADO: R$ {frete_total:.2f}')
            
            # Verificar se h√° outros campos que podem conter custos de frete
            print()
            print('üîç VERIFICANDO OUTROS CAMPOS DE FRETE:')
            
            # Verificar estrutura completa para encontrar custos de frete
            for key, value in venda_data.items():
                if isinstance(value, dict):
                    for sub_key, sub_value in value.items():
                        if 'shipping' in sub_key.lower() or 'frete' in sub_key.lower() or 'envio' in sub_key.lower():
                            print(f'   {key}.{sub_key}: {sub_value}')
                elif isinstance(value, list) and len(value) > 0:
                    for i, item in enumerate(value):
                        if isinstance(item, dict):
                            for sub_key, sub_value in item.items():
                                if 'shipping' in sub_key.lower() or 'frete' in sub_key.lower() or 'envio' in sub_key.lower():
                                    print(f'   {key}[{i}].{sub_key}: {sub_value}')
        
        else:
            print('‚ùå Erro ao obter dados da venda')
    else:
        print('‚ùå Nenhuma venda encontrada')
        
except Exception as e:
    print(f'‚ùå Erro: {e}')
    import traceback
    traceback.print_exc()

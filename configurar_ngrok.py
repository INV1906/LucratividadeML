#!/usr/bin/env python3
"""
Script para configurar ngrok com as configura√ß√µes corretas.
"""

import subprocess
import sys
import time
import requests
import json

def verificar_ngrok():
    """Verifica se o ngrok est√° instalado."""
    try:
        result = subprocess.run(['ngrok', 'version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Ngrok encontrado: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Ngrok n√£o encontrado")
            return False
    except FileNotFoundError:
        print("‚ùå Ngrok n√£o est√° instalado")
        print("üì• Baixe em: https://ngrok.com/download")
        return False

def obter_url_ngrok():
    """Obt√©m a URL atual do ngrok."""
    try:
        response = requests.get('http://127.0.0.1:4040/api/tunnels')
        if response.status_code == 200:
            data = response.json()
            for tunnel in data['tunnels']:
                if tunnel['proto'] == 'https':
                    url = tunnel['public_url']
                    print(f"‚úÖ URL do ngrok encontrada: {url}")
                    return url
        return None
    except requests.exceptions.RequestException:
        print("‚ùå N√£o foi poss√≠vel conectar ao ngrok")
        return None

def iniciar_ngrok(porta=5000):
    """Inicia o ngrok na porta especificada."""
    print(f"üöÄ Iniciando ngrok na porta {porta}...")
    
    # Comando para iniciar ngrok
    cmd = ['ngrok', 'http', str(porta), '--log=stdout']
    
    try:
        # Inicia ngrok em background
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # Aguarda um momento para ngrok inicializar
        time.sleep(3)
        
        # Verifica se ngrok est√° rodando
        url = obter_url_ngrok()
        if url:
            print(f"‚úÖ Ngrok iniciado com sucesso!")
            print(f"üåê URL p√∫blica: {url}")
            print(f"üîó URL de callback: {url}/callback")
            print("\nüìã Atualize seu arquivo .env com:")
            print(f"MELI_REDIRECT_URI={url}/callback")
            return url
        else:
            print("‚ùå Falha ao obter URL do ngrok")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar ngrok: {e}")
        return None

def configurar_aplicacao_ml(ngrok_url):
    """Fornece instru√ß√µes para configurar a aplica√ß√£o no Mercado Livre."""
    print("\nüîß Configure sua aplica√ß√£o no Mercado Livre:")
    print("1. Acesse: https://developers.mercadolibre.com/")
    print("2. V√° em 'Suas aplica√ß√µes'")
    print("3. Edite sua aplica√ß√£o")
    print(f"4. Configure a URL de callback: {ngrok_url}/callback")
    print("5. Salve as altera√ß√µes")

def main():
    """Fun√ß√£o principal."""
    print("üîß Configurador do Ngrok para Mercado Livre")
    print("=" * 50)
    
    # Verifica se ngrok est√° instalado
    if not verificar_ngrok():
        return
    
    # Verifica se ngrok j√° est√° rodando
    url_existente = obter_url_ngrok()
    if url_existente:
        print("‚ÑπÔ∏è  Ngrok j√° est√° rodando")
        configurar_aplicacao_ml(url_existente)
        return
    
    # Inicia ngrok
    porta = input("Digite a porta da aplica√ß√£o Flask (padr√£o: 5000): ").strip()
    if not porta:
        porta = 5000
    else:
        try:
            porta = int(porta)
        except ValueError:
            print("‚ùå Porta inv√°lida, usando 5000")
            porta = 5000
    
    url = iniciar_ngrok(porta)
    if url:
        configurar_aplicacao_ml(url)
        
        print("\n‚ö†Ô∏è  IMPORTANTE:")
        print("1. Mantenha este terminal aberto enquanto usa a aplica√ß√£o")
        print("2. Atualize o arquivo .env com a nova URL")
        print("3. Reinicie a aplica√ß√£o Flask")
        print("4. Configure a URL no painel do Mercado Livre")
        
        input("\nPressione Enter para finalizar...")
    
if __name__ == "__main__":
    main()
